>>>>>
Starter POMs
https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter

- empty jar, it purpose is to provide neccessary dependances so you don't need to worry what are all neccessary dempendances snd spares you
  a lot of copy/paste 
- Starters are a set of convenient dependency descriptors that you can include in your application. You get a one-stop shop for all
  the Spring and related technologies that you need without having to hunt through sample code and copy-paste loads of dependency
  descriptors. For example, if you want to get started using Spring and JPA for database access, include the spring-boot-starter-data-jpa
  dependency in your project.
<<<<<

>>>>>
<parent>

- enables to inherit defaults from Spring Boot

Maven users can inherit from the spring-boot-starter-parent project to obtain sensible defaults.
The parent project provides the following features:
    Java 1.8 as the default compiler level.
    UTF-8 source encoding.
    A Dependency Management section, inherited from the spring-boot-dependencies pom, that manages the versions of common dependencies.
	    This dependency management lets you omit <version> tags for those dependencies when used in your own pom.
    An execution of the repackage goal with a repackage execution id.
    Sensible resource filtering.
    Sensible plugin configuration (exec plugin, Git commit ID, and shade).
    Sensible resource filtering for application.properties and application.yml including profile-specific files (for example,
	    application-dev.properties and application-dev.yml)

Note that, since the application.properties and application.yml files accept Spring style placeholders (${…​}), the Maven filtering is
changed to use @..@ placeholders. (You can override that by setting a Maven property called resource.delimiter.)

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.7.RELEASE</version>
	</parent>

With that setup, you can also override individual dependencies by overriding a property in your own project. For instance, to upgrade to
another Spring Data release train, you would add the following to your pom.xml:

	<properties>
		<spring-data-releasetrain.version>Fowler-SR2</spring-data-releasetrain.version>
	</properties>
<<<<<

>>>>>
Spring Boot 2.x Actuators

Spring Boot provides several out of the box management services with its actuator module, such as health, audits, beans, and more.
Spring Boot Actuator provides secured endpoints for monitoring and managing your Spring Boot application.
Actuator comes with most endpoints disabled.  To enable all of them, we could set:
    management.endpoints.web.exposure.include=*
Alternatively, we could list endpoints which should be enabled.
To expose all enabled endpoints except one :
    management.endpoints.web.exposure.include=*
    management.endpoints.web.exposure.exclude=loggers
    
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        
        curl localhost:8080/actuator/health
        

If you want to use the separate port number for accessing the Spring boot actutator endpoints add the management port number
in application.properties file. Note that if you specified the management port number, then same application is running on
two different port numbers.
    management.server.port = 9000

<<<<<

>>>>>
Command line runner and Application runner

Command line runner and Application runner are both an interface. They are used to execute code after the Spring Boot application started.
These interface holds run(), which will be call just after SpringBeans and ApplicationContext are created.

When you want to execute some piece of code exactly before the application startup completes, you can use it then. In one of our projects,
we used these to source data from other microservices via service discovery, which was registered in Consul.

You can register as many application/command line runners as you want. You just need to register them as Beans in the application context.
Then, Spring will automatically pick them up.

You can order them as well either by extending interface org.springframework.core.Ordered or via the @Order annotation.

ApplicationRunner wraps the raw application arguments and exposes the ApplicationArguments interface,
which has many convenient methods to get arguments, like getOptionNames() to return all the arguments' names,
getOptionValues() to return the argument value, and raw source arguments with method getSourceArgs().

<<<<<

>>>>>
application properties

Spring Boot application converts the command line properties into Spring Boot Environment properties. Command line properties take precedence
over the other property sources.
		server.port = 9090 - change port number
		spring.application.name = demoservice - change app name

Application properties - External properties
Instead of keeping the properties file under classpath, we can keep the properties in different location or path.
You read them with help of -Dspring.config.location = C:\application.properties

		java -jar "jar file".jar -Dspring.config.location = C:\application.properties

Application properties - Active profile
Spring Boot supports different properties based on the Spring active profile.
Properties are kept in different files
	application.properties
	application-dev.properties
	application-prod.properties
While running the JAR file, we need to specify the spring active profile based on each properties file.
		java -jar "jar file".jar -spring.properites.active="dev or prod"

Spring Boot supports YAML based properties configurations to run the application. Instead of application.properties,
we can use application.yml file. This YAML file also should be kept inside the classpath.
We can keep the Spring active profile properties in the single application.yml file.
No need to use the separate file like application.properties.

If the server.port number is 0 while starting the Spring Boot application, Tomcat uses the random port number.

<<<<<

>>>>>
Logging

Spring Boot uses Apache Commons logging for all internal logging. Spring Boot’s default configurations provides a support for the use
of Java Util Logging, Log4j2, and Logback. Using these, we can configure the console logging as well as file logging.

The default log messages will print to the console window. By default, “INFO”, “ERROR” and “WARN” log messages will print in the log file.
If you have to enable the debug level log, add the debug flag on starting your application:
		java –jar demo.jar --debug
or add the debug mode to your application.properties file:
		debug = true

If you want to print the logs in a file, you need to set the property logging.file or logging.path in the application.properties file.
You can specify the log file path using the property. Note that the log file name is spring.log:
		logging.path = /var/tmp/
or You can specify the own log file name:
		logging.file = /var/tmp/mylog.log
Note − files will rotate automatically after reaching the size 10 MB.

Spring Boot supports all logger levels such as “TRACE”, “DEBUG”, “INFO”, “WARN”, “ERROR”, “FATAL”, “OFF”. You can define Root logger
in the application.properties file:
		logging.level.root = WARN

Logback ( successor of Log4j) supports XML based configuration to handle Spring Boot Log configurations. Logging configuration details
are configured in logback.xml file. The logback.xml file should be placed under the classpath.
You can configure the console appender or/and file appender in Logback.xml file. You can define the Log pattern as well
<<<<<

>>>>>
Restfull web service

@RestController - start point, maps JSON, XLM responses
@RequestMapping(value = "/products")
public ResponseEntity<Object> createProduct(@RequestBody Product product){...}
public ResponseEntity<Object> updateProduct(@PathVariable("id") String id){...}
public ResponseEntity<Object> getProduct(@RequestParam(value = "name", required = false, defaultValue = "honey") String name) {...}

The default HTTP request method is GET. This method does not require any Request Body. You can send request parameters and path variables
to define the custom or dynamic URL.
The HTTP POST request is used to create a resource. This method contains the Request Body. We can send request parameters and path variables
to define the custom or dynamic URL.
The HTTP PUT request is used to update the existing resource. This method contains a Request Body. We can send request parameters and
path variables to define the custom or dynamic URL.
The HTTP Delete request is used to delete the existing resource. This method does not contain any Request Body. We can send request
parameters and path variables to define the custom or dynamic URL.
<<<<<

>>>>>
Exception handling

@ControlerAdvice annotated class is a central place to define exception handling, and @ExceptionHandler annotated method in this calss
handles the specific exception and sending the custom responses to the client
<<<<<

>>>>>
Interceptors

You can use the Interceptor in Spring Boot to perform operations under the following situations:
    - Before sending the request to the controller
    - Before sending the response to the client
For example, you can use an interceptor to add the request header before sending the request to the controller and add the response header
before sending the response to the client.

To work with interceptor, you need to create @Component class that supports it and it should implement the HandlerInterceptor interface.
	- preHandle() - perform operations before sending the request to the controller.
	- postHandle() -  perform operations before sending the response to the client.
	- afterCompletion() - perform operations after completing the request and response.

You will have to register this Interceptor with InterceptorRegistry by using @Component WebMvcConfigurerAdapter
<<<<<

>>>>>
Servlet filters

A filter is an object used to intercept the HTTP requests and responses of your application. By using filter,
we can perform two operations at two instances:
    - Before sending the request to the controller
    - Before sending a response to the client

To implement Filter you need @Component that implements Filter interface.
<<<<<

>>>>>
File handling, upload/download

For uploading a file, you can use MultipartFile as a Request Parameter and this API should consume Multi-Part form data value

For file download, you should use InputStreamResource for downloading a File. We need to set the HttpHeader Content-Disposition
in Response and need to specify the response Media Type of the application.
<<<<<

>>>>>
Service components

Service Components are the class file which contains @Service annotation. These class files are used to write business logic in a different
layer, separated from @RestController class file.
<<<<<

>>>>>
Thmeleaf

Thymeleaf is a Java-based library used to create a web application. It provides a good support for serving a XHTML/HTML5 in web applications.
Thymeleaf converts your files into well-formed XML files. It contains 6 types of templates as given below −
    XML
    Valid XML
    XHTML
    Valid XHTML
    HTML5
    Legacy HTML5
Use the @Controller class to redirect the Request URI to HTML file
The request URI is /index, and the control is redirected into the index.html file. Note that the index.html file should be placed under
the templates directory and all JS and CSS files should be placed under the static directory in classpath.
<<<<<

>>>>>
Cross-Origin Resource Sharing (CORS) support

Cross-Origin Resource Sharing (CORS) is a security concept that allows restricting the resources implemented in web browsers. It prevents
the JavaScript code producing or consuming the requests against different origin.
For example, your web application is running on 8080 port and by using JavaScript you are trying to consuming RESTful web services from 9090
port. Under such situations, you will face the Cross-Origin Resource Sharing security issue on your web browsers.
<<<<<

>>>>>
Internalization

We need to determine default Locale of your application. We need to add the LocaleResolver bean in our Spring Boot application.
LocaleChangeInterceptor is a used to change the new Locale based on the value of the language parameter added to a request.
To take this effect, we need to add the LocaleChangeInterceptor into the application’s registry interceptor.
The configuration class should extend the WebMvcConfigurerAdapter class and override the addInterceptors() method.
Spring Boot application by default takes the message sources from src/main/resources folder under the classpath.
The default locale message file name should be message.properties and files for each locale should name as messages_XX.properties.
The “XX” represents the locale code.
<<<<<

>>>>>
Scheduling

Scheduling is a process of executing the tasks for the specific time period. Spring Boot provides a good support to write a scheduler
on the Spring applications.
Java Cron expressions are used to configure the instances of CronTrigger.

The @EnableScheduling annotation is used to enable the scheduler for your application. This annotation should be added into
the main Spring Boot application class file.
The @Scheduled annotation is used to trigger the scheduler for a specific time period.
	@Scheduled(cron = "0 * 9 * * ?")
	
Fixed Rate scheduler is used to execute the tasks at the specific time. It does not wait for the completion of previous task.
	@Scheduled(fixedRate = 1000)
Fixed Delay scheduler is used to execute the tasks at a specific time. It should wait for the previous task completion.
@Scheduled(fixedDelay = 1000, initialDelay = 1000)
<<<<<

>>>>>
Enabling HTTPS

Obtain the SSL certificate – Create a self-signed certificate or get one from a Certificate Authority

Create a self-signed certificate with Java tool "keytool"
	keytool -genkey -alias tomcat -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650

Enable HTTPS and 443 port
with application.properties
	server.port: 443
	server.ssl.key-store: keystore.p12
	server.ssl.key-store-password: springboot
	server.ssl.keyStoreType: PKCS12
	server.ssl.keyAlias: tomcat

with application.yml
	server:
	   port: 443
	   ssl:
	      key-store: keystore.p12
	      key-store-password: springboot
	      keyStoreType: PKCS12
	      keyAlias: tomcat
<<<<<

>>>>>
Eureka Server/Client

Add @EnableEurekaServer annotation to your main Spring Boot application class
Add @EnableEurekaClient annotation in the main Spring Boot application class, Eureka client will register application to the
    Eureka server

extra properties to set:
eureka.client.serviceUrl.defaultZone  = http://localhost:8761/eureka
eureka.client.instance.preferIpAddress = true
<<<<<

>>>>>
Zuul Server

Zuul Server is a gateway application that handles all the requests and does the dynamic routing of microservice applications.
The Zuul Server is also known as Edge Server.

Add the @EnableZuulProxy annotation on your main Spring Boot application.
extra properties to set:
zuul.routes.products.path = /api/demo/**
zuul.routes.products.url = http://localhost:8080/
  - calls to /api/demo/ get forwarded to the products service. For example, /api/demo/products is forwarded to /products.
<<<<<

>>>>>
Spring Config Server

Add the @EnableConfigServer annotation in your main Spring Boot application class file that will act as Config server.

extra properties to set on the server:

If you want to load the configurations from a file system or your project's classpath you need to
run your application with 'native' spring profile
  spring.profiles.active=native
or via VM arguments
  -Dspring.profiles.active=native

If you want to put your configuration files in your file system backend
  spring.cloud.config.server.native.search-locations=file:///C:/Local_Data/projects/configprop
If you want to put your configuration files in your classpath
  spring.cloud.config.server.native.search-locations=classpath:/config

You can access server:
  localhost:8888/"application name"/default/master 
  
Add the @RefreshScope annotation to your main Spring Boot application class file that will act as Config client

extra properties to set on client
add the config server URL in your application.properties
  spring.cloud.config.uri = http://localhost:8888

change application properties on Configuration server,
and hit the actuator endpoint POST localhost:8080/actuator/refresh on client side, to refresh the bean 
without stopping JVM
  curl localhost:8080/actuator/refresh -d {} -H "Content-Type: application/json
refresh the client app

<<<<<

>>>>>
Spring Admin Server/client

Server
Add the @EnableAdminServer annotation in your main Spring Boot application class file.

CLient
Enable the SBA Client by configuring the URL of the Spring Boot Admin Server:
    spring.boot.admin.client.url=http://localhost:8080 (this is
       needed only in case Eureka discovery is not active)
    management.endpoints.web.exposure.include=*

>>>>>

>>>>>
Swagger2 - REST API Design/Development/Documentation

Add the @EnableSwagger2 annotation in your main Spring Boot application, or Configuration class

Configure the Swagger through Docket bean
  - select which APIs with help of ApiSelectorBuilder.apis()
  - select which paths with help of  ApiSelectorBuilder.paths()

Swagger UI is a built-in solution which makes user interaction with the Swagger-generated API documentation
much easier.

access documentaion:
	http://localhost:8080/"your_app"/swagger-ui.html
<<<<<

>>>>>
Docker build
Requires extra file name Dockerfile containg instructions how to build image

Note − Enable the Expose daemon on tcp://localhost:2375 without TLS ---??????? doesn't work

This doesn't work for mee.

Maven build with Eclipse Docker plugin:
	mvn package docker:build
Gradle build with gradle-docker dependency and new created task buildDocker
	gradle build vuildDocker
<<<<<

>>>>>
Cloud logging with Zipkin

Add @EnableZipkinServer to your Spring Boot application to make it Zipkin server

On the client side adding zipkin dependency should be enough
Configure zipkin 
spring-cloud-zipkin-base-url =  http://localhost:8123/
log format should be [application-name,traceid,spanid,zipkin-export]
	zipkin-export - By default it is false. If it is true, logs will be exported to the Zipkin server

Access zipkin server 
	http://localhost:8123/zipkin/
<<<<<

>>>>>
Flyway database upgrade

You need to set bunch of properties for JDBC and Flyway
You need to defined upgrade files like V1_inital.sql in src/main/resources/db/migration
and that is it

<<<<<

>>>>>
Email, with attachemnt

"mail.smtp.auth", "true"
"mail.smtp.starttls.enable", "true"
"mail.smtp.host", "smtp.gmail.com" if sent via gmail
"mail.smtp.port", "587"
"mail.smtp.host", "localhost" is local email server
 
If it is required to provide user ID and Password to the e-mail server
"mail.user", "myuser"
"mail.password", "mypwd"

Note − Please switch ON allow less secure apps in your Gmail account settings before sending an email.
<<<<<

>>>>>
Hystrix - circuit breaker

@EnableHystrix to enable functionality
@HystrixCommand and @HystrixProperty annotations, annotate monitored method
HystricCommand will block any exception from monitored method so be careful
monitored method and fallback method must have the same signature

<<<<<

>>>>>
WebSocket and STOMP

this example doesn't work
<<<<<

>>>>>
Batch service/processing

<<<<<
 

Spring annotations:
  - @AutoConfigureMockMvc - sets up MockMvc from Spring Test which  allows, via a set of convenient builder classes, to send HTTP requests
    into the DispatcherServlet and make assertions about the result
  - @LocalServerPort - add local server port discovered at runtime
  - @SpringBootTest - whole application context to be created. An alternative would be to ask Spring Boot to create only the web layers
    of the context using the @WebMvcTest
  - @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) - start up embedded server on random port
  - @WebMvcTest - create only the web layers of the context


 curl -X PUT -d '<?xml version="1.0" encoding="UTF-8"?><project><name>G1</name></project>' --header 'Content-Type:application/xml' \
     https://lmr-g1-ci-infobank.rnd.ki.sw.ericsson.se/infobank/rest/project